//TASK 1
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Random;

public class Mainn {
    public static void main(String[] args) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        Random random = new Random();
        int val = random.nextInt(101);
        int count = 0;
        for (int i = 0; i < 10; i++) {
            String choice = "yes";
            while (choice.equals("yes")) {
                System.out.println("guess the number between (0 to 100)");
                int num = Integer.parseInt(reader.readLine());
                if (num >= 101) {
                    System.out.println("Wrong Input");
                    break;
                }
                if (val > num) {
                    System.out.println("Guess little higher");
                } else if (val < num) {
                    System.out.println("Guess little lower");
                } else if (val == num) {
                    count++;
                    System.out.println("congratulations you won the game");
                    System.out.println("your score:" + count);
                    System.out.println("Are you want to play again(yes/no)");
                    choice = reader.readLine().toLowerCase();
                    if (choice.equals("no")) {
                        i = 10;
                        break;
                    }
                    while (!choice.equals("no") && !choice.equals("yes")) {
                        System.out.println("enter the correct input(yes/no)");
                        choice = reader.readLine().toLowerCase();
                    }
                    if (choice.equals("yes")) {
                        val = random.nextInt(101);
                    }
                }
            }
        }
    }
}    
//TASK 2
import java.util.Scanner;

public class CustomGradeCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of subjects: ");
        int numSubjects = scanner.nextInt();

        int[] marks = new int[numSubjects];

        for (int i = 0; i < numSubjects; i++) {
            System.out.print("Enter marks for subject " + (i + 1) + ": ");
            marks[i] = scanner.nextInt();
        }

        int totalMarks = 0;
        for (int mark : marks) {
            totalMarks += mark;
        }

        double averagePercentage = (double) totalMarks / numSubjects;

        String grade;
        if (averagePercentage >= 90) {
            grade = "A+";
        } else if (averagePercentage >= 85) {
            grade = "A";
        } else if (averagePercentage >= 80) {
            grade = "B+";
        } else if (averagePercentage >= 75) {
            grade = "B";
        } else if (averagePercentage >= 70) {
            grade = "C+";
        } else if (averagePercentage >= 65) {
            grade = "C";
        } else if (averagePercentage >= 60) {
            grade = "D+";
        } else {
            grade = "F";
        }

        System.out.println("Total Marks: " + totalMarks);
        System.out.println("Average Percentage: " + String.format("%.2f", averagePercentage) + "%");
        System.out.println("Grade: " + grade);
    }
}
//TASK 3

import java.util.*;

class Atm_project {
    public static void main(String[] args) {
        int pin = 1234;
        int balance = 100000;
        int deposit = 0;
        int withdraw = 0;
        String name;
        Scanner scanner = new Scanner(System.in);
        System.out.println("enter your pin number");
        int password = scanner.nextInt();// shift+alt+f
        if (password == pin) {
            System.out.println("enter your name:");
            name = scanner.next();// already string given
            System.out.println("Welcome" + name);
            while (true) {
                System.out.println("press 1 to check your balance");
                System.out.println("press 2 to deposit");

                System.out.println("press 3 to withdraw");
                System.out.println("press 4 to take recipet");
                System.out.println("press 5 to EXIT");
                int opt = scanner.nextInt();
                switch (opt) {
                    case 1:
                        System.out.println("your current balance is " + balance);
                        break;
                    case 2:
                        System.out.println("how much amount you want to deposit");
                        deposit = scanner.nextInt();
                        System.out.println("Successfully credited");
                        balance = balance + deposit;
                        break;
                    case 3:
                        System.out.println("how much amount you want to withdraw");
                        withdraw = scanner.nextInt();
                        if (withdraw > balance) {
                            System.out.println("withdraw failed");
                            System.out.println("try within your balance:");
                        } else {
                            System.out.println("Successfully taken");
                            balance = balance - withdraw;
                        }
                        break;
                    case 4:
                        System.out.println("Welcome guys");
                        System.out.println("balance is:" + balance);
                        System.out.println("deposited:" + deposit);
                        System.out.println("withdrawn:" + withdraw);
                        System.out.println("Thanks for coming guys");
                        break;

                    case 5:
                        System.out.println("Thank you! Have a great day."); // Corrected: Improved exit message
                        scanner.close(); // Corrected: Added scanner close to avoid resource leak
                        return; // Corrected: Used return to exit the program

                    default:
                        System.out.println("Invalid option. Please try again."); // Corrected: Added default case to
                                                                                 // handle invalid options
                }
            }
        } else {
            System.out.println("Wrong pin number. Access denied."); // Corrected: Improved error message for wrong pin
        }
    }
}
//TASK 4
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;

import org.json.JSONObject;

public class CurrencyConverter {

    private static final String API_KEY = "YOUR_API_KEY_HERE";
    private static final String API_URL = "https://api.exchangerate-api.com/v4/latest/";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Select base currency (e.g., USD, EUR, JPY): ");
        String baseCurrency = scanner.nextLine().toUpperCase();

        System.out.println("Select target currency (e.g., USD, EUR, JPY): ");
        String targetCurrency = scanner.nextLine().toUpperCase();

        System.out.println("Enter amount to convert: ");
        double amount = scanner.nextDouble();

        double exchangeRate = getExchangeRate(baseCurrency, targetCurrency);
        double convertedAmount = convertAmount(amount, exchangeRate);

        System.out.println(amount + " " + baseCurrency + " = " + convertedAmount + " " + targetCurrency);
    }

    private static double getExchangeRate(String baseCurrency, String targetCurrency) {
        try {
            URL url = new URL(API_URL + baseCurrency + "?access_key=" + API_KEY);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String response = reader.readLine();
                JSONObject jsonObject = new JSONObject(response);
                return jsonObject.getJSONObject("rates").getDouble(targetCurrency);
            } else {
                System.out.println("Failed to retrieve exchange rate");
                return 0;
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            return 0;
        }
    }

    private static double convertAmount(double amount, double exchangeRate) {
        return amount * exchangeRate;
    }
}
//TASK 5
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

class Student {
    private String name;
    private int rollNumber;
    private String grade;

    public Student(String name, int rollNumber, String grade) {
        this.name = name;
        this.rollNumber = rollNumber;
        this.grade = grade;
    }

    public String getName() {
        return name;
    }

    public int getRollNumber() {
        return rollNumber;
    }

    public String getGrade() {
        return grade;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setRollNumber(int rollNumber) {
        this.rollNumber = rollNumber;
    }

    public void setGrade(String grade) {
        this.grade = grade;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Roll Number: " + rollNumber + ", Grade: " + grade;
    }
}

class StudentManagementSystem {
    private ArrayList<Student> students = new ArrayList<>();

    public void addStudent(Student student) {
        students.add(student);
    }

    public void removeStudent(int rollNumber) {
        students.removeIf(student -> student.getRollNumber() == rollNumber);
    }

    public Student searchStudent(int rollNumber) {
        for (Student student : students) {
            if (student.getRollNumber() == rollNumber) {
                return student;
            }
        }
        return null;
    }

    public ArrayList<Student> getAllStudents() {
        return students;
    }
}

class StudentManagementGUI extends JFrame {
    private StudentManagementSystem sms = new StudentManagementSystem();

    public StudentManagementGUI() {
        // Create the frame
        setTitle("Student Management System");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Create components
        JLabel nameLabel = new JLabel("Name:");
        JTextField nameField = new JTextField(15);
        JLabel rollLabel = new JLabel("Roll Number:");
        JTextField rollField = new JTextField(5);
        JLabel gradeLabel = new JLabel("Grade:");
        JTextField gradeField = new JTextField(2);

        JButton addButton = new JButton("Add Student");
        JButton viewButton = new JButton("View Students");

        JTextArea displayArea = new JTextArea(10, 30);
        displayArea.setEditable(false);

        // Set layout and add components
        setLayout(new FlowLayout());
        add(nameLabel);
        add(nameField);
        add(rollLabel);
        add(rollField);
        add(gradeLabel);
        add(gradeField);
        add(addButton);
        add(viewButton);
        add(new JScrollPane(displayArea));

        // Add action listeners
        addButton.addActionListener(e -> {
            String name = nameField.getText();
            int rollNumber = Integer.parseInt(rollField.getText());
            String grade = gradeField.getText();
            sms.addStudent(new Student(name, rollNumber, grade));
            JOptionPane.showMessageDialog(this, "Student added successfully!");
        });

        viewButton.addActionListener(e -> {
            displayArea.setText("");
            ArrayList<Student> students = sms.getAllStudents();
            if (students.isEmpty()) {
                displayArea.append("No students available.\n");
            } else {
                for (Student student : students) {
                    displayArea.append(student + "\n");
                }
            }
        });

        // Set visibility
        setVisible(true);
    }

    public static void main(String[] args) {
        new StudentManagementGUI();
    }
}


